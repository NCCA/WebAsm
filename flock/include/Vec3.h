 #ifndef VEC3_H__
#define VEC3_H__
#include <ostream>
class Vec3
{

public:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief copy ctor
  /// @param[in] _v the value to set
  //----------------------------------------------------------------------------------------------------------------------
  Vec3( const Vec3& _v  ) :
  m_x(_v.m_x),
  m_y(_v.m_y),
  m_z(_v.m_z){;}

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief initialise the constructor from 3 or 4 float
  /// @param[in]  _x x value
  /// @param[in]  _y y value
  /// @param[in]  _z z value
  /// @param[in]  _w 1.0f default so acts as a points
  //----------------------------------------------------------------------------------------------------------------------
   Vec3(float _x=0.0,  float _y=0.0, float _z=0.0  ):
   m_x(_x),
   m_y(_y),
   m_z(_z){;}

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the Vec3 component from 3 values
  /// @param[in]  _x the x component
  /// @param[in]  _y the y component
  /// @param[in]  _z the z component
  //----------------------------------------------------------------------------------------------------------------------
  void set( float _x,  float _y,  float _z );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set from another  Vec3
  /// @param[in]  _v the Vec3 to set from
  //----------------------------------------------------------------------------------------------------------------------
  void set( const Vec3& _v );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set from another  Vec3
  /// @param[in]  _v the Vec3 to set from
  //----------------------------------------------------------------------------------------------------------------------
  void set( const Vec3* _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief return this dotted with _b
  /// @param[in]  _b vector to dot current vector with
  /// @returns  the dot product
  //----------------------------------------------------------------------------------------------------------------------
  float dot(const Vec3 &_b  )const;


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief clears the Vec3 to 0,0,0
  //----------------------------------------------------------------------------------------------------------------------
  void null();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief [] index operator to access the index component of the Vec3
  /// @returns  this[x] as a float
  //----------------------------------------------------------------------------------------------------------------------
  float& operator[]( const int& _i ) ;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief [] index operator to access the index component of the Vec3
  /// @returns  this[x] as a float
  //----------------------------------------------------------------------------------------------------------------------
  const float& operator[]( const int& _i ) const { return m_openGL[_i]; }

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Normalize the vector using
  /// \n \f$x=x/\sqrt{x^2+y^2+z^2} \f$
  /// \n \f$y=y/\sqrt{x^2+y^2+z^2} \f$
  /// \n \f$z=z/\sqrt{x^2+y^2+z^2} \f$
  //----------------------------------------------------------------------------------------------------------------------
  void normalize();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief calculate the inner product of this vector and vector passed in
  /// @param[in] _v the vector to calculate inner product with
  /// @returns the inner product
  //----------------------------------------------------------------------------------------------------------------------
  float inner(const Vec3& _v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief compute the outer product of this vector and vector
  /// @param[in] _v the vector to calc against
  /// @returns a new vector
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 outer( const Vec3& _v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the length of the vector
  /// @returns  \f$\sqrt{x^2+y^2+z^2} \f$
  //----------------------------------------------------------------------------------------------------------------------
  float length() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the length squared of the vector (no sqrt so quicker)
  /// @returns  \f$x^2+y^2+z^2 \f$
  //----------------------------------------------------------------------------------------------------------------------
  float lengthSquared() const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief += operator add Vec3 v to current Vec3
  /// @param[in]  &_v Vec3 to add
  //----------------------------------------------------------------------------------------------------------------------
  void operator+=(const Vec3& _v );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief -= operator this-=v
  /// @param[in]  &_v Vec3 to subtract
  //----------------------------------------------------------------------------------------------------------------------
  void operator-=( const Vec3& _v );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this * i for each element
  /// @param[in]  _i the scalar to mult by
  /// @returns Vec3
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator *( float _i )const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief + operator add Vec3+Vec3
  /// @param[in]  &_v the value to add
  /// @returns the Vec3 + v
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator +(const Vec3 &_v )const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief divide Vec3 components by a scalar
  /// @param[in] _v the scalar to divide by
  /// @returns a Vec3 V(x/v,y/v,z/v,w)
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator/(float _v  )const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief divide this Vec3 components by a scalar
  /// @param[in] _v the scalar to divide by
  /// sets the Vec3 to Vec3 V(x/v,y/v,z/v,w)
  //----------------------------------------------------------------------------------------------------------------------
  void operator/=( float _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief multiply this Vec3 components by a scalar
  /// @param[in] _v the scalar to multiply by
  /// sets the Vec3 to Vec3 V(x*v,y*v,z*v,w)
  //----------------------------------------------------------------------------------------------------------------------
  void operator*=( float _v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief subtraction operator subtract vevtor-Vec3
  /// @param[in]  &_v the value to sub
  /// @returns this - v
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator-(const Vec3  &_v   )const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief * operator mult vevtor*Vec3
  /// @param[in]  _v the value to mult
  /// @returns new Vec3 this*v
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator*( const Vec3 &_v  )const;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment operator set the current Vec3 to rhs
  /// @param[in] _v the Vec3 to set
  /// @returns a new Vec3
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 &operator =( const Vec3 &_v );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assignment operator set the current Vec3 to rhs
  /// @param[in] _v the float to set
  /// @returns a new Vec3
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 &operator =(float _v );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief negate the Vec3 components
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator-() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief check for equality uses FCompare (from Util.h) as float values
  /// @param[in] _v the Vec3 to check against
  /// @returns true or false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator==( const Vec3 &_v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief not equal check
  /// @param[in] _v the Vec3 to check against
  /// @returns true of false
  //----------------------------------------------------------------------------------------------------------------------
  bool operator!=( const Vec3 &_v )const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief \ operator div Vec3/Vec3
  /// @param[in]  _v the value to div by
  /// @returns Vec3 / Vec3
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 operator/( const Vec3& _v )const;


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the Vec3 as the cross product from 2 other Vec3
  /// @param[in]  _v1 the first vector
  /// @param[in]  _v2 the second vector
  //----------------------------------------------------------------------------------------------------------------------
  void cross(const Vec3& _v1, const Vec3& _v2 );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief return the cross product of this cross with b
  /// @param[in]  _b the vector cross this with
  /// @returns  the result of this cross b
  //----------------------------------------------------------------------------------------------------------------------
  Vec3 cross(const Vec3& _b )const;

  Vec3 reflect(const Vec3 & _n) const;
  void clamp(float _min, float _max);
  // use +/- max
  void clamp(float _max);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief accesor to the m_openGL matrix returns the address of the 0th element
  //----------------------------------------------------------------------------------------------------------------------
  inline float* openGL(){return &m_openGL[0];}
/// @note I've made this public as some compilers automatically make the
/// anonymous unions public whereas clang++ complains see this post
/// http://jonmacey.blogspot.com/2011/03/anonymous-union-struct-weirdness.html
public :
#pragma pack(push,1)

  union
  {
    struct
    {
      float m_x;
      float m_y;
      float m_z;

    };
#pragma pack(pop)
  float m_openGL[3];
  };
//----------------------------------------------------------------------------------------------------------------------
/// @brief scalar * vector operator
/// @param _k the float value
/// @param _v the vector value
/// @returns a vector _k*v
//----------------------------------------------------------------------------------------------------------------------
//Vec3 operator *(float _k, const Vec3 &_v)
//{
//  return Vec3(_k*_v.x, _k*_v.y, _k*_v.z);
//}

};

std::ostream& operator<<(std::ostream& _output, const Vec3& _s);

#endif

//----------------------------------------------------------------------------------------------------------------------
